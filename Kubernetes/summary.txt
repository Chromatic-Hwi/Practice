<22.04.16>
·파이프라인 사용을 통해 얻는 이점
생산성 향상
예측 가능한 품질
장애 대응능력 향상

·ML시스템 개발 및 배포는 비교적 쉽지만, 해당 시스템을 유지, 관리하는 비용은 코스트가 매우 높다.

·문제해결 기법
-리펙토링
-종속성 제거
-단위 테스트
-API강화
-미사용 코드 삭제
-문서화
-----> 유지보수성 향상

·MLOps 성숙도 구분을 보고 스스로 코드 레벨을 분석

머신러닝 파이프라인 단계
-데이터 전처리, 모델 학습 및 모델 분석, 배포 등 다양한 단계가 포함됨
-수동으로 모든 과정을 수행하는 것은 번거롭고 오류가 발생하기 쉬움

<22.04.17>
HPO : Hyper Parameter Optimization
-하이퍼 파라미터 튜닝과 모델 아키텍처에 따른 결과를 편리하게 확인
Sweep : 하이퍼 파라미터를 자동으로 최적화해주는 도구
-제공되는 Search 방식은 grid, random, bayes가 있음
-선택한 Search 방식으로 튜닝이 완료되면 WandB의 웹에서 제공되는 dashboard로 시각화된 모습 확인

<22.04.20>
리서치 코드 품질 문제
-리서치 코드는 각자의 개인 컴퓨터에 저장되어 공유가 되지 않고 있다.
-코드는 복사 붙여넣기식 개발로 인해 중복이 많다.

코드 중복의 문제
-SW 취약점이 있는 코드가 복사될 때 개발자가 알지 못하는 경우, 취약점은 복사된 코드에 계속 남게 된다.

코드 중복을 사용했을 때 장점
-컴파일 시간 단축
-인지 부하 감소
-인적 오류 감소

너무 많은 전역 변수의 문제점
-당장 쓰기에는 편하지만 항상 사이드 이펙트를 초래한다.
-함수에 명시적으로 파라미터를 전달하고 받아오는 방식을 통해 일관된 출력이 필요하다.

너무 긴 코드
-디버깅하고 불편하고 각 함수와 클래스의 구분이 명확하지 않게 된다.
-500자 이내 추천

Import 정리
-import 위치가 복잡해지면 참조 관계가 얽혀서 디버깅이 어려워지게 된다.
-PYTHONPATH 환경변수를 사용하여 시작 지점을 명확하게 하고, absolute import를 사용하자

린트(Lint)
-python black 사용
-카멜 케이스(대소문자로 구분), 스네이크 케이스('_'로 구분)
-flake8
-mypy
-타입 힌트
